import { ChangeEvent, FormEvent, useState } from "react";
import { NextPage, GetServerSideProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import BlogItem from "../../components/BlogItem";
import PageTitle from "../../components/PageTitle";
import { BlogType } from "../../interfaces";

interface BlogProps {
  blogs: BlogType[];
  noResults: boolean;
}

const Blog: NextPage<BlogProps> = ({ blogs, noResults }) => {
  const [activeFilter, setActiveFilter] = useState("");
  const [searchTerm, setSearchTerm] = useState("");

  const router = useRouter();

  const handleFilterClick = (filterValue: string) => {
    router.push(`/blog?q=${filterValue}`);
    setActiveFilter(filterValue);
    setSearchTerm("");
  };

  const handleSearch = () => {
    router.push(`/blog?q=${searchTerm}`);
  };

  const filteredBlogs = blogs.filter((blog) => {
    if (activeFilter && blog.category.toLowerCase() !== activeFilter) {
      return false;
    }

    if (
      searchTerm &&
      !(
        blog.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        blog.category.toLowerCase().includes(searchTerm.toLowerCase())
      )
    ) {
      return false;
    }

    return true;
  });

  return (
    <>
      <Head>
        <title>Store - Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title="Blogs" />

      <section className="bg0 p-t-62 p-b-60">
        <div className="container">
          <div className="row">
            <div className="col-md-8 col-lg-9 p-b-80">
              <div className="p-r-45 p-r-0-lg">
                {noResults ? (
                  <p>No matching items found.</p>
                ) : (
                  <div className="row">
                    {filteredBlogs.map((blog: BlogType) => (
                      <BlogItem key={blog.id} blog={blog} />
                    ))}
                  </div>
                )}
              </div>
            </div>

            <div className="col-md-4 col-lg-3 p-b-80">
              <div className="side-menu">
                <form
                  className="bor17 of-hidden pos-relative"
                  onSubmit={(e: FormEvent<HTMLFormElement>) => {
                    e.preventDefault();
                    handleSearch();
                  }}
                >
                  <input
                    className="stext-103 cl2 plh4 size-116 p-l-28 p-r-55"
                    type="text"
                    name="search"
                    placeholder="Search"
                    value={searchTerm}
                    onChange={(e: ChangeEvent<HTMLInputElement>) =>
                      setSearchTerm(e.target.value)
                    }
                    onKeyUp={() => {
                      handleSearch();
                    }}
                  />

                  <button
                    className="flex-c-m size-122 ab-t-r fs-18 cl4 hov-cl1 trans-04"
                    onClick={() => handleSearch()}
                  >
                    <i className="zmdi zmdi-search"></i>
                  </button>
                </form>

                <div className="p-t-55">
                  <h4 className="mtext-112 cl2 p-b-33">Categories</h4>

                  <ul>
                    <li className="bor18">
                      <button
                        className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${
                          activeFilter === "fashion" ? "how-active1" : ""
                        }`}
                        onClick={() => handleFilterClick("fashion")}
                      >
                        Fashion
                      </button>
                    </li>

                    <li className="bor18">
                      <button
                        className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${
                          activeFilter === "beauty" ? "how-active1" : ""
                        }`}
                        onClick={() => handleFilterClick("beauty")}
                      >
                        Beauty
                      </button>
                    </li>

                    <li className="bor18">
                      <button
                        className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${
                          activeFilter === "streetstyle" ? "how-active1" : ""
                        }`}
                        onClick={() => handleFilterClick("streetstyle")}
                      >
                        Street Style
                      </button>
                    </li>

                    <li className="bor18">
                      <button
                        className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${
                          activeFilter === "lifestyle" ? "how-active1" : ""
                        }`}
                        onClick={() => handleFilterClick("lifestyle")}
                      >
                        Life Style
                      </button>
                    </li>

                    <li className="bor18">
                      <button
                        className={`dis-block stext-115 cl6 hov-cl1 trans-04 p-tb-8 p-lr-4 ${
                          activeFilter === "diy" ? "how-active1" : ""
                        }`}
                        onClick={() => handleFilterClick("diy")}
                      >
                        Diy & Crafts
                      </button>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export default Blog;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  try {
    const queryParamProducts = query.q || "";
    const queryParamGender = query.gender || "";
    const queryParamSearch = query.search || "";

    const apiEndpoint = "http://localhost:5001/blogs?";
    const queryParams = [];

    if (queryParamProducts) {
      queryParams.push(`q=${queryParamProducts}`);
    }

    if (queryParamGender) {
      queryParams.push(`category_like=${queryParamGender}`);
    }

    if (queryParamSearch) {
      queryParams.push(`search=${queryParamSearch}`);
    }

    const fullEndpoint = apiEndpoint + queryParams.join("&");

    const response = await fetch(fullEndpoint);

    if (!response.ok) {
      throw new Error("Failed to fetch data from the API");
    }

    const blogs: BlogType[] = await response.json();
    const noResults = blogs.length === 0;

    return {
      props: {
        blogs,
        noResults,
      },
    };
  } catch (error) {
    console.error("An error occurred:", error);
    return {
      props: {
        dataProducts: [],
        noResults: true,
      },
    };
  }
};
