import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { ProductType } from "../../interfaces";
import ProductItem from "../../components/ProductItem";
import { useRouter } from "next/router";
import { ChangeEvent, useState } from "react";

interface Props {
  dataProducts: ProductType[];
  noResults: boolean;
}

const itemsPerPage = 8;

const Shop: NextPage<Props> = ({ dataProducts, noResults }) => {
  const [activeFilter, setActiveFilter] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);

  const router = useRouter();

  const handleFilterClick = (filterValue: string) => {
    router.push(`/shop?q=${filterValue}`);
    setActiveFilter(filterValue);
    setCurrentPage(1);
  };

  const handleSearch = () => {
    router.push(`/shop?q=${searchTerm}`);
  };

  const totalPages = Math.ceil(dataProducts.length / itemsPerPage);

  const displayProducts = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return dataProducts.slice(startIndex, endIndex);
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  return (
    <>
      <Head>
        <title>Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="bg0 m-t-23 p-b-140">
        <div className="container">
          <div className="flex-w flex-sb-m p-b-52">
            <div className="flex-w flex-l-m filter-tope-group m-tb-10">
              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  activeFilter === "" ? "how-active1" : ""
                }`}
                data-filter="*"
                onClick={() => handleFilterClick("")}
              >
                All Products
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  activeFilter === "women" || router.query.gender === "women"
                    ? "how-active1"
                    : ""
                }`}
                data-filter=".women"
                onClick={() => handleFilterClick("women")}
              >
                Women
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  activeFilter === "man" ? "how-active1" : ""
                }`}
                data-filter=".men"
                onClick={() => handleFilterClick("man")}
              >
                Men
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  activeFilter === "belt" ? "how-active1" : ""
                }`}
                data-filter=".bag"
                onClick={() => handleFilterClick("belt")}
              >
                Belt
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  activeFilter === "shoes" ? "how-active1" : ""
                }`}
                data-filter=".shoes"
                onClick={() => handleFilterClick("shoes")}
              >
                Shoes
              </button>

              <button
                className={`stext-106 cl6 hov1 bor3 trans-04 m-r-32 m-tb-5 ${
                  activeFilter === "watch" ? "how-active1" : ""
                }`}
                data-filter=".watches"
                onClick={() => handleFilterClick("watch")}
              >
                Watches
              </button>
            </div>

            <div className="flex-w flex-c-m m-tb-10">
              <div className="flex-c-m stext-106 cl6 size-105 bor4 pointer hov-btn3 trans-04 m-tb-4 js-show-search show-search">
                <i className="icon-search cl2 m-r-6 fs-15 trans-04 zmdi zmdi-search"></i>
                Search
              </div>
            </div>

            {/* search */}
            <div className="panel-search w-full p-t-10 p-b-15">
              <div className="bor8 dis-flex p-l-15">
                <button
                  className="size-113 flex-c-m fs-16 cl2 hov-cl1 trans-04"
                  onClick={() => handleSearch()}
                >
                  <i className="zmdi zmdi-search"></i>
                </button>

                <input
                  className="mtext-107 cl2 size-114 plh2 p-r-15"
                  type="text"
                  name="search-product"
                  placeholder="Search"
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    setSearchTerm(e.target.value)
                  }
                  onKeyUp={() => {
                    handleSearch();
                  }}
                />
              </div>
            </div>
          </div>

          {noResults ? (
            <h2>No results found.</h2>
          ) : (
            <div className="row isotope-grid">
              {displayProducts().map((product) => (
                <ProductItem key={product.id} product={product} />
              ))}
            </div>
          )}

          <div className="flex-l-m flex-w w-full p-t-10 m-lr--7">
            {Array.from({ length: totalPages }, (_, index) => (
              <a
                key={index}
                href="#"
                className={`flex-c-m how-pagination1 trans-04 m-all-7 ${
                  currentPage === index + 1 ? "active-pagination1" : ""
                }`}
                onClick={() => handlePageChange(index + 1)}
              >
                {index + 1}
              </a>
            ))}
          </div>
        </div>
      </div>
    </>
  );
};

export default Shop;

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  try {
    const queryParamProducts = query.q || "";
    const queryParamGender = query.gender || "";
    const queryParamSearch = query.search || "";

    const apiEndpoint = "http://localhost:5001/products?";
    const queryParams = [];

    if (queryParamProducts) {
      queryParams.push(`q=${queryParamProducts}`);
    }

    if (queryParamGender) {
      queryParams.push(`gender_like=${queryParamGender}`);
    }

    if (queryParamSearch) {
      queryParams.push(`search=${queryParamSearch}`);
    }

    const fullEndpoint = apiEndpoint + queryParams.join("&");

    const response = await fetch(fullEndpoint);

    if (!response.ok) {
      throw new Error("Failed to fetch data from the API");
    }

    const dataProducts: ProductType = await response.json();

    const noResults = dataProducts.length === 0;

    return {
      props: {
        dataProducts,
        noResults,
      },
    };
  } catch (error) {
    console.error("An error occurred:", error);
    return {
      props: {
        dataProducts: [],
        noResults: true,
      },
    };
  }
};
